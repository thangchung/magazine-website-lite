using System;
using System.Collections.ObjectModel;
using System.Data;
using System.Data.Entity;
using System.Data.Entity.Design.PluralizationServices;
using System.Data.Entity.Infrastructure;
using System.Globalization;
using System.Linq;
using SharpLite.Domain;
using SharpLite.Domain.DataInterfaces;

namespace SharpLite.EntityFrameworkProvider
{
    public class Repository<T> : RepositoryWithTypedId<T, int>, IRepository<T> where T : class, IEntityWithTypedId<int>
    {
        public Repository(System.Data.Entity.DbContext dbContext) : base(dbContext) { }
    }

    public class RepositoryWithTypedId<T, TId> : IRepositoryWithTypedId<T, TId> where T : class, IEntityWithTypedId<TId>
    {
        #region variables & ctors

        private System.Data.Entity.DbContext _dbContext;
        private Collection<string> Includes { get; set; }
        private readonly string _connectionStringName;
        private readonly PluralizationService _pluralizer = PluralizationService.CreateService(CultureInfo.GetCultureInfo("en")); 

        public RepositoryWithTypedId(string connectionStringName)
        {
            _connectionStringName = connectionStringName;
            Includes = new Collection<string>();
        }

        public RepositoryWithTypedId(System.Data.Entity.DbContext dbContext)
        {
            if (dbContext == null) throw new ArgumentNullException("dbContext may not be null");

            _dbContext = dbContext;
            Includes = new Collection<string>();
        }

        #endregion

        #region public components

        public virtual IDbContext DbContext
        {
            get
            {
                if (_dbContext == null)
                {
                    if (_connectionStringName == string.Empty)
                        _dbContext = DbContextManager.Current;
                    else
                        _dbContext = DbContextManager.CurrentFor(_connectionStringName);
                }
                return new DbContext(_dbContext);
            }
        }

        public virtual T Get(TId id)
        {
            return SelectedSetWithIncludes.AsEnumerable().Single(entity => id.Equals(entity.Id));
        }

        public virtual IQueryable<T> GetAll() {
            return SelectedSetWithIncludes;
        }

        public virtual T SaveOrUpdate(T entity) {
            if (entity == null)
                return null;

            if (entity.IsTransient())
            {
                // _dbContext.Set<T>().Add(entity);
                if (entity.Id == null || entity.Id.Equals(default(TId)))
                    Add(entity);
                else
                    Update(entity);
            }

            return entity;
        }

        /// <summary>
        /// This deletes the object and commits the deletion immediately.  We don't want to delay deletion
        /// until a transaction commits, as it may throw a foreign key constraint exception which we could
        /// likely handle and inform the user about.  Accordingly, this tries to delete right away; if there
        /// is a foreign key constraint preventing the deletion, an exception will be thrown.
        /// </summary>
        public virtual void Delete(T entity) {
            _dbContext.Set<T>().Remove(entity);
            _dbContext.SaveChanges();
        }

        /// <summary>
        /// Include all sub table names, so when we executing the query, 
        /// it will be automatically get all data from sub-tables as well
        /// </summary>
        public IRepositoryWithTypedId<T, TId> Include(string subTableName)
        {
            Includes.Add(subTableName);

            return this;
        }

        #endregion

        #region private functions

        private void Add(T entity)
        {
            if (entity == null)
            {
                throw new ArgumentNullException("entity");
            }

            _dbContext.Set<T>().Attach(entity);
            _dbContext.Set<T>().ToList().Add(entity);
        }

        private void Update(T entity)
        {
            var fqen = GetEntityName<T>();

            object originalItem;
            var key = ((IObjectContextAdapter)_dbContext).ObjectContext.CreateEntityKey(fqen, entity);
            if (((IObjectContextAdapter)_dbContext).ObjectContext.TryGetObjectByKey(key, out originalItem))
            {
                ((IObjectContextAdapter)_dbContext).ObjectContext.ApplyCurrentValues(key.EntitySetName, entity);
            }
        } 

        private string GetEntityName<T>()
        {
            return string.Format("{0}.{1}", ((IObjectContextAdapter)_dbContext).ObjectContext.DefaultContainerName, _pluralizer.Pluralize(typeof(T).Name));
        }

        private DbQuery<T> SelectedSetWithIncludes
        {
            get
            {
                DbQuery<T> query = _dbContext.Set<T>();

                foreach (var include in Includes)
                {
                    query = (DbQuery<T>)query.Include<T>(include);
                }

                return query;
            }
        }

        #endregion
    }
}
